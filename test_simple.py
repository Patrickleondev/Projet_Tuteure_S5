#!/usr/bin/env python3
"""
Script de test simplifi√© pour v√©rifier l'int√©gration
"""
import sys
from pathlib import Path

# Ajouter le r√©pertoire courant au path
sys.path.append(str(Path(__file__).parent))

def test_imports():
    """Test des imports"""
    print("üß™ Test des imports...")
    try:
        from services.regression_service import RegressionPredictionService
        print("‚úÖ RegressionPredictionService import√© avec succ√®s")
        
        from services.prediction_service import PredictionService
        print("‚úÖ PredictionService import√© avec succ√®s")
        
        from services.chatbot_service import ChatbotService
        print("‚úÖ ChatbotService import√© avec succ√®s")
        
        return True
    except Exception as e:
        print(f"‚ùå Erreur d'import: {str(e)}")
        return False

def test_regression_service():
    """Test du service de r√©gression"""
    print("\nüîß Test du service de r√©gression...")
    try:
        from services.regression_service import RegressionPredictionService
        
        service = RegressionPredictionService()
        
        if service.model and service.scaler:
            print("‚úÖ Mod√®le et scaler charg√©s avec succ√®s")
            
            # Test de pr√©diction
            result = service.predict_match_result("Real Madrid", "Barcelona")
            if result:
                print("‚úÖ Pr√©diction r√©ussie")
                print(f"   Score: {result['buts_equipe1']} - {result['buts_equipe2']}")
                print(f"   R√©sultat: {result['resultat']}")
            else:
                print("‚ùå √âchec de la pr√©diction")
        else:
            print("‚ùå Mod√®le ou scaler non charg√©")
            return False
            
        return True
    except Exception as e:
        print(f"‚ùå Erreur: {str(e)}")
        return False

def test_prediction_service():
    """Test du service de pr√©diction principal"""
    print("\nüéØ Test du service de pr√©diction principal...")
    try:
        from services.prediction_service import PredictionService
        
        service = PredictionService()
        
        # Test de r√©cup√©ration des √©quipes
        teams = service.get_available_competitions()
        if teams:
            print("‚úÖ Comp√©titions charg√©es avec succ√®s")
            print(f"   Nombre de types de comp√©titions: {len(teams)}")
        else:
            print("‚ùå √âchec du chargement des comp√©titions")
            return False
            
        return True
    except Exception as e:
        print(f"‚ùå Erreur: {str(e)}")
        return False

def main():
    """Fonction principale"""
    print("üöÄ Test d'int√©gration du syst√®me FIP")
    print("=" * 50)
    
    # Tests
    success = True
    
    if not test_imports():
        success = False
    
    if not test_regression_service():
        success = False
    
    if not test_prediction_service():
        success = False
    
    # R√©sultat final
    print("\n" + "=" * 50)
    if success:
        print("üéâ Tous les tests sont pass√©s ! Le syst√®me est pr√™t.")
        print("\nüìã Prochaines √©tapes:")
        print("1. Activer l'environnement virtuel: .venv\\Scripts\\Activate.ps1")
        print("2. Lancer l'application: python app.py")
        print("3. Ouvrir http://localhost:5000 dans le navigateur")
    else:
        print("‚ùå Certains tests ont √©chou√©. V√©rifiez les erreurs ci-dessus.")
    
    return success

if __name__ == "__main__":
    main() 